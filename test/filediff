#!/usr/bin/perl
#
#  command:
#        filediff [-r] [-q] file1 file2 [file3] ...
#
# Find differences between each file specified in the command line.
#   There must be at least two readable text files specified.
#   If the file2 specified in the command line is a directory,
#      the second file is file2/file1.
#   When a line in the two files being compared contains fields that
#     are different, the two lines are printed preceded by a line with
#     dashes over the mismatched fields.
#   Two numeric fields that differ by a value no larger than a round off
#     error are considered as equal and are not printed.
#   Integers are never checked for roundup.  An integer is a number
#     that has no decimal point, e.g. 1, 28, 013, 2389, etc..
#     The value 23 is considered to be an integer while 23.0 is a numeric
#     field, not an integer.
#   Numeric fields are equal because of possible roundup when the difference
#     of the two fields is equal to or less than one in the last position.
#     The number 2.345 is equal to 2.346 and also to 2.344, but the numbers 
#     2.345 and 2.347 are not equal.
#   When the -r option is given, numeric fields are not checked for
#     round off error and all lines containing fields that do not match
#     exactly are printed.
#   When the -q option is given, the leading line displaying the
#     names of the two files being commpared is not printed
#                                
# Don Wright
#
#  version 1.0    22 Oct 2007
#  version 1.1    24 Oct 2007  Second command line argument may be
#                               a directory.
#                              Dashes appear above fields that do not match
#  version 1.2     2 Nov 2007  Adds the -r command line option.
#                              Two numeric fields that differ by a value
#                                no larger than a round off error are
#                                considered as equal and are not printed.
#  version 1.2.1   5 Nov 2007  Corrects problem where scientific notation
#                                numbers containing E rather than e are
#                                not properly compared.
#  version 1.2.2   6 Nov 2007  When the command line file2 is a directory
#                                the file name added to the directory name
#                                is the file1 file with all the leading
#                                directory names removed.
#  version 1.3     8 Nov 2007  Adds the -q command line option.  Also
#                                corrects problem when a line 2 has more
#                                fields than the corrsponding line 1.
#
#  Bugs: some numbers being checked for roundup are improperly found to be
#        unequal when the precision of the two numbers is different.  For
#        example the number 2.34 is found to be not equal to 2.3362 and
#        the numbers 1.0 and 0.8 are not equal.
#
#####
##### initialization
#####
$dashes = '-------------------------------------------------------------------';
$blanks = '                                                                   ';

#####
##### execution begins
#####

&process_command_line();  # Get names of files to compare
&check_files_are_text();  # Assure all files are readable text files
&compare_files();  #  compare the files two at a time

#####
##### execution ends
#####

##########################################
# subroutine definitions start here
##########################################

######
###### process command-line arguments (get names of files to compare)
######

sub process_command_line
{
$result = "good";
$check_roundup_err = "yes";
$quiet_output = "no";
while(substr($ARGV[0], 0, 1) eq "-") {
if($ARGV[0] eq "-r") {
  $check_roundup_err = "no";
  shift @ARGV;
}
elsif($ARGV[0] eq "-q") {
   $quiet_output = "yes";
   shift @ARGV;
}
elsif(($ARGV[0] eq "-qr") || ($ARGV[0] eq "-rq")) {
   $quiet_output = "yes";
   $check_roundup_err = "no";
   shift @ARGV;
}
else {
   printf "invalid option %s.  Only -r and -q are valid\n", $ARGV[0];
   $result = "bad";
   shift @ARGV;
}
}
$i = -1;
foreach $arg (@ARGV) {
    $file[++$i] = $arg;
}
if($i < 1) {
    printf "At least two filenames must be given in the command line\n";
    $result = "bad";
}
if(-d $file[1]) { # Check second argument is a directory
   $subfile = $file[0];
   $subfile =~ s%(.+\/)(.*$)%$2%g;
   $file[1] = $file[1] . "/" . $subfile;
}
if($result eq "bad") {
    # Quit if not enough files are given
    printf "filediff has been terminated\n"; exit 1;
}
$last_file_index = $#file; # Number of files - 1
}

######
###### check that all files to compare exist, are readable and are text files
######

sub check_files_are_text
{
$result = "good";
for($i = 0; $i <= $last_file_index; $i++) {
     do {printf "%s does not exist\n", $file[$i]; $result = "bad";}
         unless -e $file[$i];
}
if($result eq "good") {
    for($i = 0; $i <= $last_file_index; $i++) {
        do {printf "%s is not readable\n", $file[$i]; $result = "bad";}
            unless -r $file[$i];
        do {printf "%s is not a text file\n", $file[$i]; $result = "bad";}
            unless -T $file[$i];
    }
}
if($result eq "bad") {
    # Quit if not enough files are given
    printf "filediff has been terminated\n"; exit 1;
}
}

######
###### compare two files
######

sub compare_files # Compare all files given in the command line
{
for($f1_index = 0; $f1_index < $last_file_index; $f1_index++) {
    open(F1, $file[$f1_index]);
    @f1_lines = <F1>; # Read the entire first file
    for($i= 0; $i <= $#f1_lines; $i++) { ;}  # Read the entire first file
    for($f2_index = $f1_index + 1; $f2_index <= $last_file_index; $f2_index++) {
       if($quiet_output eq "no") {
          printf "F1= %s  F2= %s\n\n", $file[$f1_index],   $file[$f2_index];
       }
       open(F2, $file[$f2_index]);
       $nbr_mismatched_lines = 0;
       $total_nbr_lines = 0;
       $f1_line_index = 0;
       $f2_line_index = 0;
       while($f2_line = <F2>) { # read a line from F2
          $total_nbr_lines++;
          $f1_line = $f1_lines[$f1_line_index];
          compare_lines();
          $f1_line_index++; $f2_line_index++;
       }
       if($total_nbr_lines < $#f1_lines + 1) { #F1 has more lines than F2
          $f2_line = '';
          @f2_fields = ' ';
          @err_line= "----->";
          for($k = $f1_line_index; $k <= $#f1_lines; $k++) {
             $f1_line = $f1_lines[$k]; # read remaining lines from F1
             @f1_fields = split(' ', $f1_line);
             print_lines();
             $f1_line_index++; $f2_line_index++;
          }
       }
    }
}
}


######
###### compare two lines, one each from files one and two
######

sub compare_lines # Compare all fields in the two lines
{
@f1_fields = split(' ', $f1_line);
@f2_fields = split(' ', $f2_line);

$fields_are_same = "yes";
if(($#f1_fields == -1) && ($#f2_fields == -1)) {
   # both lines are empty
   return;  # Treat two empty lines as equal
}
$limit = $#f1_fields;
if($limit < $#f2_fields) { # take max nbr fields
   $limit = $#f2_fields;
}
@err_line = ();
if($#f1_fields == -1) {
   @err_line= "----->";  # line in first file is empty
   $fields_are_same = "no";
}
else {
   for($fld_index = 0; $fld_index <= $limit; $fld_index++) {
      &compare_field();
   }
}
if($fields_are_same eq "no") {
   print_lines();
}
}

######
###### compare a field in both lines
######

sub compare_field
{
&set_err("d", $f1_fields[$fld_index], $f1_fields[$fld_index]);
if($f1_fields[$fld_index] ne $f2_fields[$fld_index]) {
   # the two fields don't match as strings
   &check_fields();
}
else { # fields match
   &set_err("b", $f1_fields[$fld_index], $f1_fields[$fld_index]);
}   
}


######
###### check mis-matched string fields for numeric equivalency 
######

sub check_fields  # mis-matched string fields
{
if($#f1_fields == -1) { # the line from F1 is empty
   @err_line = "----->";
}

# chop any %-sign off the end of a field
@fld_val = ($f1_fields[$fld_index], $f2_fields[$fld_index]);
@end_chr = ("", "");
for($fldnbr = 0; $fldnbr <= 1; $fldnbr++) {
   if(substr($fld_val[$fldnbr], length($fld_val[$fldnbr]) - 1, 1) eq "%") {
      $fld_val[$fldnbr] =~ s/\%$//; # remove %-sign at end of field
      $end_chr[$fldnbr] = "%";
   }
}

@fld_type = (0, 0);
$fld_type[0] = &get_fld_type($fld_val[0]);
$fld_type[1] = &get_fld_type($fld_val[1]);

if($fld_type[0] != $fld_type[1]) {
   $fields_are_same = "no";
   &set_err("d", $fld_val[0], $fld_val[1]);
}

if(($fld_type[0] == 0) && ($fld_type[1] == 0)) { # integer (no dec. pt.)
   if($fld_val[0] != $fld_val[1]) {
      $fields_are_same = "no";
      &set_err("d", $fld_val[0], $fld_val[1]);
   }
   else {
      &set_err("b", $fld_val[0], $fld_val[1]);
   }   
}
elsif(($fld_type[0] == 1) && ($fld_type[1] == 1)) { # number w/ dec. pt.
   # both fields are a number with a decimal point
   if($fld_val[0] != $fld_val[1]) {
      # values of the fields don't match, check for roundup
      if(&check_roundup($fld_val[0], $fld_val[1]) eq "equal") {
         &set_err("b", $fld_val[0], $fld_val[1]);
      }
      else {
         $fields_are_same = "no";
         &set_err("d", $fld_val[0], $fld_val[1]);
      }
   }
   else { # values of the fields match
      &set_err("b", $fld_val[0], $fld_val[1]);
   }
}
elsif(($fld_type[0] == 3) || ($fld_type[1] == 3)) { # char. string
   # at least one of the fields is a character string
   $fields_are_same = "no";
   &set_err("d", $fld_val[0], $fld_val[1]);
}

elsif(($fld_type[0] == 2) || ($fld_type[1] == 2)) { # nbr is sci notation
   @fld_1 = split(/[eE]/, $fld_val[0]);
   @fld_2 = split(/[eE]/, $fld_val[1]);
      for($j = 0; $j <= 1; $j++) {
         &set_err("b", $fld_1[$j], $fld_2[$j]);
         $err_fld[$j] = $err_line[$fld_index];
         if($fld_1[$j] != $fld_2[$j]) {
            if(&check_roundup($fld_1[$j], $fld_2[$j]) eq "not equal") {
               $fields_are_same = "no";
               &set_err("d", $fld_1[$j], $fld_2[$j]);
               $err_fld[$j] = $err_line[$fld_index];
            }
         }   
      }
      # put scient. nbr error line together
      $err_line[$fld_index] = $err_fld[0] . " " . $err_fld[1];
}
# adjust error field for any %-sign removed earlier
if(($end_chr[0] eq "%") || ($end_chr[1] eq "%")) {
   $err_line[$fld_index] .= " ";
}
}

######
###### determine the type of field
######
#
#  returns 0 if the field is an integer (all digits no dec pt)
#  returns 1 if the field is a number (all digits with a dec pt)
#  returns 2 if the field is a number in scientific notation (n.nnne-jj)
#  returns 3 if the field is not a number of any type

sub get_fld_type
{
local($fld_val) = @_;
$type = 3;
if($fld_val =~ /^[+-]?\ *\d+$/) { # is field an integer
   $type = 0;
   }
elsif($fld_val =~ /^[+-]?\ *      # first, match an optional sign [and blank]
             (             # then match integers or f.p. mantissas:
                 \d*       # start out with a ...
                 (\.\d*) # mantissa of the form a.b or a.
                 |\.\d+)     # mantissa of the form .b
                 $/x) { # is field a number of form = +/-d.dd
      $type = 1;
      }
elsif($fld_val =~  /^[+-]?\ *      # first, match an optional sign [and blank]
             (             # then match integers or f.p. mantissas:
                 \d+       # start out with a ...
                 (\.\d*) # mantissa of the form a.b or a.
                 |\.\d+)     # mantissa of the form .b
             ([eE][+-]?\d+)  # finally, optionally match an exponent
          $/x) {
          $type = 2;
          }
# equiv. one-line:  /^[+-]?\ *(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?$/;
return $type;
}


######
###### check if numbers are different by roundup error
######
#
#   It is assumed that the values of the two numbers are not equal
#   If the numbers differ by more than the roundup value the
#      string "not equal" is returned.  If the differece of the 
#      numbers is 0 or within the bounds of roundup error, the
#      string "equal" is returned.  The roundup value is 1 in the
#      last digit of the number.
#   If the option -r has been given in the command line the
#      string "not equal" is returned.
#
sub check_roundup {
   local($fld_val1, $fld_val2) = @_;
   $sub_result = "not equal";
   if($check_roundup_err eq "no") {
      return $sub_result; # don't check for roundup error
   }
   $fld_type = &get_fld_type($fld_val1);
   if($fld_type == 1) {
      #fields are numbers, i.e. have a decimal point
      $min_nbr = $fld_val1 <= $fld_val2 ? $fld_val1 : $fld_val2;
      $max_nbr = $fld_val1 > $fld_val2 ? $fld_val1 : $fld_val2;
      $nbr_of_min_lng = length($fld_val1) <= length($fld_val2) ? $fld_val1 : $fld_val2;
      $diff_value = $nbr_of_min_lng;
      $diff_value =~ tr [0-9] [0];
      $diff_value =~ s/0$/1/;
      $diff_value =~ s/^[+-]//;
      $diff_value .= 1; # take care of imperfection of real number representation
      $diff = $max_nbr - $min_nbr;
      if($diff > $diff_value) {
         &set_err("d", $fld_val1, $fld_val2);
      }
      else { #  $diff <= $diff_value
         &set_err("b", $fld_val1, $fld_val2);
         $sub_result = "equal";
      }
   }
return $sub_result;
}

######
###### set the error line field to blanks or dashes 
######

sub set_err
{
local($str, $f1, $f2) = @_;
$lng_of_err = length($f1);
if($fld_index > $#f1_fields) {
   $lng_of_err = length($f2);
}
if($str eq "b") {
   $err_line[$fld_index] = substr($blanks, 0, $lng_of_err);
}
else {
   $err_line[$fld_index] = substr($dashes, 0, $lng_of_err);
}
}

######
###### print the two mis-matched lines currently being compared 
######

sub print_lines
{
for($fn = 0; $fn <= $#err_line; $fn++) {
  printf "%s ", $err_line[$fn];
}
printf "\n";
for($fn = 0; $fn <= $#f1_fields; $fn++) {
  printf "%s ", $f1_fields[$fn];
}
printf "\n";
for($fn = 0; $fn <= $#f2_fields; $fn++) {
  printf "%s ", $f2_fields[$fn];
}
printf "\n\n";
$nbr_mismatched_lines++;
}